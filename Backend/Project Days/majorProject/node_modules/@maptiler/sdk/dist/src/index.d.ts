import { default as maplibregl } from 'maplibre-gl';
export type * from 'maplibre-gl';
/**
 * Get the version of MapTiler SDK, this is declared in the vite config
 * to avoid importing the entire package.json
 */
export declare function getVersion(): string;
declare const MapMLGL: typeof maplibregl.Map;
declare const MarkerMLGL: typeof maplibregl.Marker;
declare const PopupMLGL: typeof maplibregl.Popup;
declare const StyleMLGL: typeof maplibregl.Style;
declare const CanvasSourceMLGL: typeof maplibregl.CanvasSource;
declare const GeoJSONSourceMLGL: typeof maplibregl.GeoJSONSource;
declare const ImageSourceMLGL: typeof maplibregl.ImageSource;
declare const RasterTileSourceMLGL: typeof maplibregl.RasterTileSource;
declare const RasterDEMTileSourceMLGL: typeof maplibregl.RasterDEMTileSource;
declare const VectorTileSourceMLGL: typeof maplibregl.VectorTileSource;
declare const VideoSourceMLGL: typeof maplibregl.VideoSource;
declare const NavigationControMLGL: typeof maplibregl.NavigationControl;
declare const GeolocateControlMLGL: typeof maplibregl.GeolocateControl;
declare const AttributionControlMLGL: typeof maplibregl.AttributionControl;
declare const LogoControlMLGL: typeof maplibregl.LogoControl;
declare const ScaleControlMLGL: typeof maplibregl.ScaleControl;
declare const FullscreenControlMLGL: typeof maplibregl.FullscreenControl;
declare const TerrainControMLGL: typeof maplibregl.TerrainControl;
declare const BoxZoomHandlerMLGL: typeof maplibregl.BoxZoomHandler;
declare const ScrollZoomHandlerMLGL: typeof maplibregl.ScrollZoomHandler;
declare const CooperativeGesturesHandlerMLGL: typeof maplibregl.CooperativeGesturesHandler;
declare const KeyboardHandlerMLGL: typeof maplibregl.KeyboardHandler;
declare const TwoFingersTouchPitchHandlerMLGL: typeof maplibregl.TwoFingersTouchPitchHandler;
declare const MapWheelEventMLGL: typeof maplibregl.MapWheelEvent;
declare const MapTouchEventMLGL: typeof maplibregl.MapTouchEvent;
declare const MapMouseEventMLGL: typeof maplibregl.MapMouseEvent;
declare const configMLGL: maplibregl.Config;
declare const getMapLibreVersion: typeof maplibregl.getVersion;
declare const setRTLTextPlugin: typeof maplibregl.setRTLTextPlugin, getRTLTextPluginStatus: typeof maplibregl.getRTLTextPluginStatus, LngLat: typeof maplibregl.LngLat, LngLatBounds: typeof maplibregl.LngLatBounds, MercatorCoordinate: typeof maplibregl.MercatorCoordinate, Evented: typeof maplibregl.Evented, AJAXError: typeof maplibregl.AJAXError, prewarm: typeof maplibregl.prewarm, clearPrewarmedResources: typeof maplibregl.clearPrewarmedResources, Hash: typeof maplibregl.Hash, Point: typeof maplibregl.Point, EdgeInsets: typeof maplibregl.EdgeInsets, DragRotateHandler: typeof maplibregl.DragRotateHandler, DragPanHandler: typeof maplibregl.DragPanHandler, TwoFingersTouchZoomRotateHandler: typeof maplibregl.TwoFingersTouchZoomRotateHandler, DoubleClickZoomHandler: typeof maplibregl.DoubleClickZoomHandler, TwoFingersTouchZoomHandler: typeof maplibregl.TwoFingersTouchZoomHandler, TwoFingersTouchRotateHandler: typeof maplibregl.TwoFingersTouchRotateHandler, getWorkerCount: typeof maplibregl.getWorkerCount, setWorkerCount: typeof maplibregl.setWorkerCount, getMaxParallelImageRequests: typeof maplibregl.getMaxParallelImageRequests, setMaxParallelImageRequests: typeof maplibregl.setMaxParallelImageRequests, getWorkerUrl: typeof maplibregl.getWorkerUrl, setWorkerUrl: typeof maplibregl.setWorkerUrl, addSourceType: (name: string, SourceType: maplibregl.SourceClass) => Promise<void>, importScriptInWorkers: typeof maplibregl.importScriptInWorkers, addProtocol: typeof maplibregl.addProtocol, removeProtocol: typeof maplibregl.removeProtocol;
export { setRTLTextPlugin, getRTLTextPluginStatus, LngLat, LngLatBounds, MercatorCoordinate, Evented, AJAXError, prewarm, clearPrewarmedResources, Hash, Point, EdgeInsets, DragRotateHandler, DragPanHandler, TwoFingersTouchZoomRotateHandler, DoubleClickZoomHandler, TwoFingersTouchZoomHandler, TwoFingersTouchRotateHandler, getWorkerCount, setWorkerCount, getMaxParallelImageRequests, setMaxParallelImageRequests, getWorkerUrl, setWorkerUrl, addSourceType, importScriptInWorkers, addProtocol, removeProtocol, getMapLibreVersion, MapMLGL, MarkerMLGL, PopupMLGL, StyleMLGL, CanvasSourceMLGL, GeoJSONSourceMLGL, ImageSourceMLGL, RasterTileSourceMLGL, RasterDEMTileSourceMLGL, VectorTileSourceMLGL, VideoSourceMLGL, NavigationControMLGL, GeolocateControlMLGL, AttributionControlMLGL, LogoControlMLGL, ScaleControlMLGL, FullscreenControlMLGL, TerrainControMLGL, BoxZoomHandlerMLGL, ScrollZoomHandlerMLGL, CooperativeGesturesHandlerMLGL, KeyboardHandlerMLGL, TwoFingersTouchPitchHandlerMLGL, MapWheelEventMLGL, MapTouchEventMLGL, MapMouseEventMLGL, configMLGL, };
export type LngLat = InstanceType<typeof LngLat>;
export type LngLatBounds = InstanceType<typeof LngLatBounds>;
export type MercatorCoordinate = InstanceType<typeof MercatorCoordinate>;
export type Evented = InstanceType<typeof Evented>;
export type AJAXError = InstanceType<typeof AJAXError>;
export type Hash = InstanceType<typeof Hash>;
export type Point = InstanceType<typeof Point>;
export type EdgeInsets = InstanceType<typeof EdgeInsets>;
export type DragRotateHandler = InstanceType<typeof DragRotateHandler>;
export type DragPanHandler = InstanceType<typeof DragPanHandler>;
export type TwoFingersTouchZoomRotateHandler = InstanceType<typeof TwoFingersTouchZoomRotateHandler>;
export type DoubleClickZoomHandler = InstanceType<typeof DoubleClickZoomHandler>;
export type TwoFingersTouchZoomHandler = InstanceType<typeof TwoFingersTouchZoomHandler>;
export type TwoFingersTouchRotateHandler = InstanceType<typeof TwoFingersTouchRotateHandler>;
export { Marker } from './MLAdapters/Marker';
export { Popup } from './MLAdapters/Popup';
export { Style } from './MLAdapters/Style';
export { CanvasSource } from './MLAdapters/CanvasSource';
export { GeoJSONSource } from './MLAdapters/GeoJSONSource';
export { ImageSource } from './MLAdapters/ImageSource';
export { RasterTileSource } from './MLAdapters/RasterTileSource';
export { RasterDEMTileSource } from './MLAdapters/RasterDEMTileSource';
export { VectorTileSource } from './MLAdapters/VectorTileSource';
export { VideoSource } from './MLAdapters/VideoSource';
export { NavigationControl } from './MLAdapters/NavigationControl';
export { GeolocateControl } from './MLAdapters/GeolocateControl';
export { AttributionControl } from './MLAdapters/AttributionControl';
export { LogoControl } from './MLAdapters/LogoControl';
export { ScaleControl } from './MLAdapters/ScaleControl';
export { FullscreenControl } from './MLAdapters/FullscreenControl';
export { TerrainControl } from './MLAdapters/TerrainControl';
export { BoxZoomHandler } from './MLAdapters/BoxZoomHandler';
export { ScrollZoomHandler } from './MLAdapters/ScrollZoomHandler';
export { CooperativeGesturesHandler } from './MLAdapters/CooperativeGesturesHandler';
export { KeyboardHandler } from './MLAdapters/KeyboardHandler';
export { TwoFingersTouchPitchHandler } from './MLAdapters/TwoFingersTouchPitchHandler';
export { MapWheelEvent } from './MLAdapters/MapWheelEvent';
export { MapTouchEvent } from './MLAdapters/MapTouchEvent';
export { MapMouseEvent } from './MLAdapters/MapMouseEvent';
export { Map, GeolocationType, type MapOptions, type LoadWithTerrainEvent } from './Map';
export * from './controls';
export { type AutomaticStaticMapOptions, type BoundedStaticMapOptions, type BufferToPixelDataFunction, type ByIdGeocodingOptions, type CenteredStaticMapOptions, type CommonForwardAndReverseGeocodingOptions, type CoordinateExport, type CoordinateGrid, type CoordinateId, type CoordinateSearch, type CoordinateSearchResult, type CoordinateTransformResult, type CoordinateTransformation, type Coordinates, type CoordinatesSearchOptions, type CoordinatesTransformOptions, type DefaultTransformation, type ElevationAtOptions, type ElevationBatchOptions, type FeatureHierarchy, type FetchFunction, type GeocodingFeature, type GeocodingOptions, type GeocodingSearchResult, type GeolocationInfoOptions, type GeolocationResult, type GetDataOptions, type LanguageGeocodingOptions, MapStyle, type MapStylePreset, type MapStyleType, MapStyleVariant, type PixelData, ReferenceMapStyle, type ReverseGeocodingOptions, ServiceError, type StaticMapBaseOptions, type StaticMapMarker, type TileJSON, type XYZ, bufferToPixelDataBrowser, circumferenceAtLatitude, coordinates, data, elevation, expandMapStyle, geocoding, geolocation, getBufferToPixelDataParser, getTileCache, mapStylePresetList, math, misc, staticMaps, styleToStyle, type LanguageInfo, areSameLanguages, toLanguageInfo, isLanguageInfo, getAutoLanguage, getLanguageInfoFromFlag, getLanguageInfoFromCode, getLanguageInfoFromKey, } from '@maptiler/client';
export { getWebGLSupportError, displayWebGLContextLostWarning } from './tools';
export { config, SdkConfig } from './config';
export * from './language';
export type { Unit } from './types';
export * from './converters';
export * as helpers from './helpers';
export * from './ColorRamp';
export * from './utils';
